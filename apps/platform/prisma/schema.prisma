datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/server/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

model User {
  id             String            @id @default(uuid())
  name           String?
  email          String            @unique
  email_verified Boolean           @default(false)
  created_at     DateTime          @default(now())
  updated_at     DateTime?         @updatedAt
  sessions       Session[]
  keys           Key[]
  tokens         AssignmentToken[]
}

model Session {
  id             String @id @default(uuid())
  user_id        String
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  active_expires BigInt
  idle_expires   BigInt

  @@index([user_id])
}

model Key {
  id              String @id @default(uuid())
  user_id         String
  user            User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  hashed_password String

  @@index([user_id])
}

model UserVerificationToken {
  id      String @id @default(uuid())
  user_id String
  expires BigInt

  @@index([user_id])
}

model PasswordResetToken {
  id      String @id @default(uuid())
  user_id String
  expires BigInt

  @@index([user_id])
}

model Assignment {
  id      String            @id @default(uuid())
  name    String
  slug    String            @unique
  due     DateTime
  submits Submit[]
  tokens  AssignmentToken[]
}

model AssignmentToken {
  id            String     @id @default(uuid())
  assignment_id String
  assignment    Assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  user_id       String
  user          User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  token         String     @unique
  expires       BigInt

  @@index([assignment_id])
  @@index([user_id])
}

model Submit {
  id            String     @id @default(uuid())
  assignment_id String
  assignment    Assignment @relation(fields: [assignment_id], references: [id], onDelete: Cascade)
  stdout        String     @default("")
  stderr        String     @default("")

  @@index([assignment_id])
}
